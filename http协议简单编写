//头文件在底下：
1 #include"tcpsocket.hpp"
2 
3 int main(int argc,char *argv[]){
4 //通过程序运行参数指定服务端要绑定的地址信息
5 // ./tcp_srv 192.168.106.133 9050
6     if(argc!=3){
7     std::cout<<"usage: ./tcp_srv 192.168.106.133 9050"<<std::endl;
8     return -1;
9     }
10     std::string srvip=argv[1];
11     uint16_t srvport=std::stoi(argv[2]);
12     TcpSocket lst_sock;//监听套接字
13     //1.创建套接字
14     CHECK_RET(lst_sock.Socket());
15     //2.绑定地址信息
16     CHECK_RET(lst_sock.Bind(srvip,srvport));
17     //3.开始监听
18     CHECK_RET(lst_sock.Listen());
19     while(1){
20     //4.获取新建连接
21         TcpSocket clisock;
22         std::string cliip;
23         uint16_t cliport;
24         bool ret=lst_sock.Accept(&clisock,&cliip,&cliport);
25         if(ret==false){
26             //clisock.Close();
27             continue;
28         }
29         std::string buf;
30         clisock.Recv(&buf);
31         std::cout<<"request:["<<buf<<"]\n";
32 
33         std::string body;
34         body="<html><body><h1>Hello Me</h1></body></html>";
35         std::stringstream ss;
36         ss<<"HTTP/1.1 200 OK\r\n";
37         ss<<"Connection: close\r\n";
38         ss<<"Content-Length: "<<body.size()<<"\r\n";
39         ss<<"Content_type: application/octet-staeam\r\n";
40         ss<<"\r\n";
41         ss<<body;
42         clisock.Send(ss.str());
43         clisock.Close();
44     }
45     //6.关闭套接字
46     lst_sock.Close();
47     return 0;
48 }
